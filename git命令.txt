1.打开git bash
2.将一个文件夹init为git仓库    git init
3.将该文件夹下的文件添加到版本控制中   git add git命令.txt    然后git命令.txt就被add进去了
4.用命令git commit告诉Git，把文件提交到仓库   git commit -m "wrote a readme file"   -m后面输入的是本次提交的说明
5.git status    git status命令可以让我们时刻掌握仓库当前的状态
6.git diff    顾名思义就是查看difference    git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别
7.提交修改和提交新文件是一样的两步，第一步是    git add  然后可以通过git status 查看哪些将要被commit   最后执行步骤4
小结：
	要随时掌握工作区的状态，使用git status命令。

	如果git status告诉你有文件被修改过，用git diff可以查看修改内容。


8.git log  命令显示从最近到最远的提交日志   加上--pretty=oneline可以看到版本号commit id
9.回退版本    $ git reset --hard HEAD^
10.git reset --hard 1094a   1094a就是版本号id    使用此命令可以直接到达某一个版本（包括最新的和被回退的）
11.Git提供了一个命令git reflog用来记录你的每一次命令，然后可以查找到对于的版本号id   就可以恢复到最新的版本
小结：
	HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

	穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

 	要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。。


小结：
	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

	场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

	场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

删除文件小结：
	先手动删除文件，然后使用git rm <file>和git add<file>效果是一样的。
	
	另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：git checkout -- test.txt   git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

	令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容